trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '<Your Azure Service Connection Name>'
  # Name of the Web App
  webAppName: '<Your Web App Name>'
  # Environment name
  environmentName: 'production'
  # Working directory
  workingDirectory: '$(System.DefaultWorkingDirectory)'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js 18.x'

    - script: |
        npm install --production
      displayName: 'Install production dependencies'
      workingDirectory: $(workingDirectory)

    - script: |
        # Create web.config for Azure App Service
        cat > web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <handlers>
              <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
            </handlers>
            <rewrite>
              <rules>
                <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                  <match url="^server.js\/debug[\/]?" />
                </rule>
                <rule name="StaticContent">
                  <action type="Rewrite" url="public{REQUEST_URI}"/>
                </rule>
                <rule name="DynamicContent">
                  <conditions>
                    <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                  </conditions>
                  <action type="Rewrite" url="server.js"/>
                </rule>
              </rules>
            </rewrite>
            <security>
              <requestFiltering>
                <hiddenSegments>
                  <remove segment="bin"/>
                </hiddenSegments>
              </requestFiltering>
            </security>
            <httpErrors existingResponse="PassThrough" />
            <iisnode watchedFiles="web.config;*.js;src/**/*.js" />
          </system.webServer>
        </configuration>
        EOF
      displayName: 'Create web.config for Azure App Service'
      workingDirectory: $(workingDirectory)

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(workingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
        verbose: true
        # Exclude development files and folders
        excludeFilesPattern: |
          node_modules/.cache/**
          .git/**
          .github/**
          *.md
          .env
          .env.*
          .gitignore
          .editorconfig
          azure-pipelines.yml
      displayName: 'Archive files'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish build artifacts'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(webAppName)'
              runtimeStack: 'NODE|18-lts'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              startUpCommand: 'npm start'
              appSettings: |
                -NODE_ENV production
                -WEBSITES_PORT 8080
                -AZURE_STORAGE_ACCOUNT_NAME $(AZURE_STORAGE_ACCOUNT_NAME)
                -AZURE_CLIENT_ID $(AZURE_CLIENT_ID) 
                -AZURE_CLIENT_SECRET $(AZURE_CLIENT_SECRET)
                -AZURE_TENANT_ID $(AZURE_TENANT_ID)
                -AZURE_BLOB_CONTAINER_NAME $(AZURE_BLOB_CONTAINER_NAME)
                -AZURE_UPLOAD_FOLDER $(AZURE_UPLOAD_FOLDER)
            displayName: 'Deploy to Azure Web App'